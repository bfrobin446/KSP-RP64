// Made by Sippyfrog aka Jake From State Farm Johnson
// Free to use by anyone, I just ask that this ^^^^^^ stays
// Ideas and support pulled from work/sources of NathanKell and Sarbian
// Additions made by Raptor831 & ValiZockt
// Made to look user-friendly for any looking to pull from or alter while also removing outdated errors from previous versions of RealFuels and Module Manager
// Abstract: changes basic fuel tanks to use RealFuels resources, also makes RCS Thrusters use Hydrazine


// LFO Tank Conversion -> Default Tank
@PART[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks],!MODULE[ModuleCommand]]:NEEDS[RealFuels]:FOR[z_RealFuels_StockEngines]    // Turns tanks with LiquidFuel and Oxidizer as resources into ModuleFuelTanks
{
  MODULE
  {
    name = ModuleFuelTanks                      // sets module
    volume = 0                                  // creates a blank volume for utilization
    @volume = #$/RESOURCE[LiquidFuel]/maxAmount$   // searches for amount of LiquidFuel to use as volume
    @volume += #$/RESOURCE[Oxidizer]/maxAmount$    // adds amount of Oxidizer to that number above
    @volume *= 5                                // multiplies entire volume by 5, this is standard conversion procedures for RealFuels
    type = Default                              // makes default tank because its easiest to use for rockets
    %basemass = volume * 0.00015 
  }

  !RESOURCE[LiquidFuel]    // removes old LiquidFuel resources
  {
  }

  !RESOURCE[Oxidizer]    // removes old Oxidizer resources
  {
  }
}

// LF Tank Conversion -> Fuselage Tank
@PART[*]:HAS[@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks],!MODULE[ModuleCommand]]:NEEDS[RealFuels]:FOR[z_RealFuels_StockEngines]    // Changes any tanks with just LiquidFuel, aircraft parts basically, and replaces with ModuleFuelTanks
{
  MODULE
  {
    name = ModuleFuelTanks                      // sets module
    volume = 0                                  // creates a blank volume for utilization
    @volume = #$/RESOURCE[LiquidFuel]/maxAmount$   // searches for amount of LiquidFuel to use as volume
    @volume *= 5                                // multiplies entire volume by 5, this is standard conversion procedures for RealFuels
    type = Fuselage                             // makes into aircraft fuselage tank
  }

  !RESOURCE[LiquidFuel]    // removes old LiquidFuel resources
  {
  }
}

// MonoProp Tank Conversion -> Service Module Tank
@PART[*]:HAS[@RESOURCE[MonoPropellant],!MODULE[ModuleFuelTanks],!MODULE[ModuleCommand]]:NEEDS[RealFuels]:FOR[z_RealFuels_StockEngines]    // Does exact same process above except for RCS tanks
{
  MODULE
  {
    name = ModuleFuelTanks                          // sets module
    volume = 0                                      // creates a blank volume for utilization
    @volume = #$/RESOURCE[MonoPropellant]/maxAmount$   // searches for previous amount of MonoPropellant to use as volume
    @volume *= 5                                    // multiplies by 5
    type = ServiceModule                            // this is best type to use for RCS tanks, holds more specialized stuff like Hydrazine
  }

  !RESOURCE[MonoPropellant]    // removes old MonoPropellant resources
  {
  }
}

// MonoProp/LFO Tank Conversion -> Servie Module Tank 
@PART[*]:HAS[@RESOURCE[MonoPropellant],@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks],!MODULE[ModuleCommand]]:NEEDS[RealFuels]:FOR[z_RealFuels_StockEngines]    // Any tanks with all 3 resources, i.e. Service Modules, replaces with 1 tank for RCS fuel and another for Fuel
{
  MODULE
  {
    name = ModuleFuelTanks                          // sets module
    volume = 0                                      // creates a blank volume for utilization
    @volume = #$/RESOURCE[MonoPropellant]/maxAmount$   // searches for previous amount of MonoPropellant to use as volume
    @volume += #$/RESOURCE[LiquidFuel]/maxAmount$   // searches for amount of LiquidFuel to use as volume
    @volume += #$/RESOURCE[Oxidizer]/maxAmount$    // adds amount of Oxidizer to that number above
    @volume *= 5                                    // multiplies by 5
    type = ServiceModule                            // this is best type to use for RCS tanks, holds more specialized stuff like Hydrazine
  }

  !RESOURCE[MonoPropellant]    // removes old MonoPropellant resources
  {
  }

  !RESOURCE[Oxidizer]    // removes old Oxidizer resources
  {
  }

  ![RESOURCE[LiquidFuel]    // removes old LiquidFuel resources
  {
  }
}

// Xenon Tank Type without EC -> ElectricPropulsion Tank Type
@PART[*]:HAS[@RESOURCE[XenonGas],!RESOURCE[ElectricCharge],!MODULE[ModuleFuelTanks]]:NEEDS[RealFuels]:FOR[z_RealFuels_StockEngines] 
{
  MODULE
  {
    name = ModuleFuelTanks                          // sets module
    volume = 0                                      // creates a blank volume for utilization
    @volume = #$/RESOURCE[XenonGas]/maxAmount$      // searches for previous amount of MonoPropellant to use as volume
    @volume *= 0.09                                 // multiplies by 0.09
    type = ElectricPropulsion                       // this is best type to use for RCS tanks, holds more specialized stuff like Hydrazine
  }

  !RESOURCE[XenonGas] {}   // removes old XenonGas resource
}

// Xenon Tank Type with EC  -> ElectricPropulsion Tank Type
@PART[*]:HAS[@RESOURCE[XenonGas],@RESOURCE[ElectricCharge],!MODULE[ModuleFuelTanks]]:NEEDS[RealFuels]:FOR[z_RealFuels_StockEngines]    
{
  MODULE
  {
    name = ModuleFuelTanks                          // sets module
    volume = 0                                      // creates a blank volume for utilization
    @volume += #$/RESOURCE[ElectricCharge]/maxAmount$ // searches for electric charge
    @volume *= 1.7                                // multiply by 1.7
    @volume += #$/RESOURCE[XenonGas]/maxAmount$      // searches for previous amount of MonoPropellant to use as volume
    @volume *= 0.09                                 // multiply by 0.09
    type = ElectricPropulsion                       // set tank type to ElectricPropulsion

    TANK
    {
      name = ElectricCharge
      amount = full
      maxAmount = #$/RESOURCE[ElectricCharge]/maxAmount$
      utilization = 7
    }
  }
  
  
  !RESOURCE[XenonGas] {}   // removes old XenonGas resource
}



// If we already have an MFT in the part (i.e. with TACLS) then add volume and change to a ServiceModule tank
@PART[*]:HAS[@MODULE[ModuleCommand],@RESOURCE[MonoPropellant],@RESOURCE[ElectricCharge],@MODULE[ModuleFuelTanks],#CrewCapacity[*],~CrewCapacity[0]]:NEEDS[RealFuels,TacLifeSupport]:FOR[z_RealFuels_StockEngines]
{
  @MODULE[ModuleFuelTanks]
  {
    @volume *= 0.2                                    // drops the volume to 1/5th for proper addition of stock resources
    @volume += #$/RESOURCE[MonoPropellant]/maxAmount$    // searches for previous amount of MonoPropellant to use as volume
    @volume *= 5                                      // multiplies by 5
    @volume += 3                                      // Adds fudge room for the electric charge
    !temp = DELETE                                    // Removes the temp value
    @type = ServiceModule                             // this is best type to use for RCS tanks, also can hold LS resources
    %basemass = -1
    TANK
    {
      name = ElectricCharge
      amount = full
      maxAmount = #$/RESOURCE[ElectricCharge]/maxAmount$
      utilization = 7
    }
    TANK
    {
      name = Hydrazine
      amount = full
      maxAmount = #$/RESOURCE[MonoPropellant]/maxAmount$
      @maxAmount *= 5
    }
    TANK
  	{
  		name = Food
  		amount = full
  		maxAmount = 1.097
      @maxAmount *= #$/CrewCapacity$
  	}
  	TANK
  	{
  		name = Water
  		amount = full
  		maxAmount = 0.725
  		@maxAmount *= #$/CrewCapacity$
  	}
  	TANK
  	{
  		name = Oxygen
  		amount = full
  		maxAmount = 111.038
      @maxAmount *= #$/CrewCapacity$
  		utilization = 221.1347
  		note = (pressurized)
  	}
  	TANK
  	{
  		name = Waste
  		amount = 0.0
  		maxAmount = 0.1
      @maxAmount *= #$/CrewCapacity$
  		fillable = false
  	}
  	TANK
  	{
  		name = WasteWater
  		amount = 0.0
  		maxAmount = 0.924
  		@maxAmount *= #$/CrewCapacity$
  		fillable = false
  	}
  	TANK
  	{
  		name = CarbonDioxide
  		amount = 0.0
  		maxAmount = 95.913
      @maxAmount *= #$/CrewCapacity$
  		utilization = 476.2173
  		note = (pressurized)
  		fillable = false
  	}
  }
  !RESOURCE[MonoPropellant]    // removes old MonoPropellant resources
  {
  }
  !RESOURCE[ElectricCharge]    // removes old ElectricCharge resources
  {
  }
}

// If we dont have a MFT yet (i.e. no TACLS), make one
// HAS Monopropellant & ElectricCharge but no LiquidFuel & Oxidizer
// MonoProp/EC Command Pod Conversion -> Servce Module Tank
@PART[*]:HAS[@MODULE[ModuleCommand],@RESOURCE[MonoPropellant],@RESOURCE[ElectricCharge],!RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks]]:NEEDS[RealFuels]:FOR[z_RealFuels_StockEngines]
{
  MODULE
  {
    name = ModuleFuelTanks
    volume = 0                                      // creates a blank volume for utilization
    @volume += #$/RESOURCE[ElectricCharge]/maxAmount$  // searches for electric charge
    @volume *= 1.7                           // RF has charge at 1000 units per liter (gets multiplied later)
    @volume += #$/RESOURCE[MonoPropellant]/maxAmount$  // searches for previous amount of MonoPropellant to use as volume
    @volume *= 5                                    // multiplies by 5
    type = ServiceModule                            // this is best type to use for RCS tanks, also can hold LS resources
    basemass = -1
    TANK
    {
      name = ElectricCharge
      amount = full
      maxAmount = #$/RESOURCE[ElectricCharge]/maxAmount$
      utilization = 7
    }
    TANK
    {
      name = Hydrazine
      amount = full
      maxAmount = #$/RESOURCE[MonoPropellant]/maxAmount$
      @maxAmount *= 5
    }
  }
  !RESOURCE[MonoPropellant]    // removes old MonoPropellant resources
  {
  }
  !RESOURCE[ElectricCharge]    // removes old ElectricCharge resources
  {
  }
}

@PART[*]:HAS[@MODULE[ModuleCommand],@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],@RESOURCE[ElectricCharge],!RESOURCE[MonoPropellant],!MODULE[ModuleFuelTanks]]:NEEDS[RealFuels]:FOR[z_RealFuels_StockEngines]
{
  MODULE
  {
    name = ModuleFuelTanks
    volume = 0                                      // creates a blank volume for utilization
    @volume += #$/RESOURCE[ElectricCharge]/maxAmount$  // searches for electric charge
    @volume *= 1.7                             // RF has charge at 1000 units per liter (gets multiplied later)
    @volume += #$/RESOURCE[LiquidFuel]/maxAmount$  // searches for previous amount of LiquidFuel
    @volume += #$/RESOURCE[Oxidizer]/maxAmount$     // serach for previous amount of Oxidizer 
    @volume *= 5                                    // multiplies by 5
    type = ServiceModule                            // this is best type to use for RCS tanks, also can hold LS resources
    basemass = -1
    TANK
    {
      name = ElectricCharge
      amount = full
      maxAmount = #$/RESOURCE[ElectricCharge]/maxAmount$
      utilization = 7
    }
  }
  !RESOURCE[ElectricCharge] {}   // removes old ElectricCharge resources
  !RESOURCE[LiquidFuel] {}   // removes old LiquidFuel resources
  !RESOURCE[Oxidizer] {}  // removes old Oxidizer resources


}

// Electric Charge Utilization seems to be to high, before this patch, 500L of volume were about 500.000 EC.
// 3x Z-1k Batteries have a little more than 500L of volume and only have 3.000 EC.
// This Patch reduzes the Utilization to be more like the stock Batteries.

@TANK_DEFINITION[ServiceModule]:AFTER[RealFuels]
{
    @TANK[ElectricCharge]
    {
        @utilization = 7
    }
}

@TANK_DEFINITION[Fuselage]:AFTER[RealFuels]
{
    @TANK[ElectricCharge]
    {
        @utilization = 7
    }
}

@TANK_DEFINITION[BalloonCryo]:AFTER[RealFuels]
{
    @TANK[ElectricCharge]
    {
        @utilization = 7
    }
}

// set drymass of all RealFuels configured tanks dependent on max volume
@PART[*]:HAS[@MODULE[ModuleFuelTanks]:HAS[#type[Default]]]:AFTER[RealFuels]
{
  @MODULE[ModuleFuelTanks]
  {
    %basemass = volume * 0.00015 
  }
}

@PART[*]:HAS[@MODULE[ModuleFuelTanks]:HAS[#type[Cryogenic]]]:AFTER[RealFuels]
{
  @MODULE[ModuleFuelTanks]
  {
    %basemass = volume * 0.00015 
  }
}



// B9 Overrides
@PART[HL_Aero_*]:HAS[@MODULE[ModuleCommand],@MODULE[ModuleFuelTanks]]:NEEDS[TacLifeSupport]:BEFORE[B9_Aerospace]
{
  !MODULE[ModuleFuelTanks],*{}
}
@PART[B9_Cockpit*]:HAS[@MODULE[ModuleCommand],@MODULE[ModuleFuelTanks]]:NEEDS[TacLifeSupport]:BEFORE[B9_Aerospace]
{
  !MODULE[ModuleFuelTanks],*{}
}
